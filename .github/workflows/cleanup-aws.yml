name: Cleanup AWS Resources

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "YES" to confirm resource removal'
        required: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

permissions:
  id-token: write
  contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirmation == 'YES'
    env:
      SST_STAGE: ${{ github.ref == 'refs/heads/dev' && 'v1-web-dev' || github.ref == 'refs/heads/staging' && 'v1-web-staging' || github.ref == 'refs/heads/main' && 'v1-web-prod' || '' }}
      STACK_NAME: ${{ github.ref == 'refs/heads/dev' && 'preppal-v1-web-dev' || github.ref == 'refs/heads/staging' && 'preppal-v1-web-staging' || github.ref == 'refs/heads/main' && 'preppal-v1-web-prod' || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate environment
        run: |
          if [ -z "$SST_STAGE" ] || [ -z "$STACK_NAME" ]; then
            echo "Cleanup is only supported for dev, staging, and main branches"
            exit 1
          fi

      - name: Remove SST resources
        run: npx sst remove --stage ${{ env.SST_STAGE }}

      - name: Verify removal
        run: |
          echo "Verifying removal of resources for ${{ github.ref }} branch..."
          
          # Check if the CloudFormation stack still exists
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} 2>&1 | grep -q 'does not exist'; then
            echo "CloudFormation stack ${{ env.STACK_NAME }} has been successfully removed."
          else
            echo "Warning: CloudFormation stack ${{ env.STACK_NAME }} may still exist."
          fi
          
          # Check for S3 buckets
          S3_BUCKETS=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, '${{ env.STACK_NAME }}')].Name" --output text)
          if [ -z "$S3_BUCKETS" ]; then
            echo "No S3 buckets found for ${{ env.STACK_NAME }}."
          else
            echo "Warning: S3 buckets may still exist: $S3_BUCKETS"
          fi
          
          # Check for Lambda functions
          LAMBDA_FUNCTIONS=$(aws lambda list-functions --query "Functions[?starts_with(FunctionName, '${{ env.STACK_NAME }}')].FunctionName" --output text)
          if [ -z "$LAMBDA_FUNCTIONS" ]; then
            echo "No Lambda functions found for ${{ env.STACK_NAME }}."
          else
            echo "Warning: Lambda functions may still exist: $LAMBDA_FUNCTIONS"
          fi
          
          # Check for API Gateway APIs
          API_IDS=$(aws apigateway get-rest-apis --query "items[?starts_with(name, '${{ env.STACK_NAME }}')].id" --output text)
          if [ -z "$API_IDS" ]; then
            echo "No API Gateway APIs found for ${{ env.STACK_NAME }}."
          else
            echo "Warning: API Gateway APIs may still exist: $API_IDS"
          fi
          
          # Check for CloudFront distributions
          CF_DISTRIBUTIONS=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Origins.Items[0].Id, '${{ env.STACK_NAME }}')].Id" --output text)
          if [ -z "$CF_DISTRIBUTIONS" ]; then
            echo "No CloudFront distributions found for ${{ env.STACK_NAME }}."
          else
            echo "Warning: CloudFront distributions may still exist: $CF_DISTRIBUTIONS"
          fi
          
          echo "Resource verification complete."